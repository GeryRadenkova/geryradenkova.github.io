---
layout: page
title: Responsive Design
permalink: /responsive-design/
---

## 1. Responsive Design (Адаптивен дизайн)

**Responsive Design** (Адаптивен уеб дизайн) е подход при създаването на уеб страници, който гарантира, че сайтът изглежда добре и работи ефективно на различни устройства и екранни размери (настолен компютър, таблет, мобилен телефон и т.н.).

**Основна идея:**
Вместо да се създават отделни версии на сайта за всяко устройство, един дизайн се адаптира динамично спрямо ширината на екрана.

**Технологии, използвани за Responsive Design:**

* CSS медийни заявки (@media)
* Гъвкави (fluid) мрежови оформления (grids)
* Адаптивни изображения (max-width: 100%)
* Viewport meta tag (обяснен в точка 3)


## 2. Principles of Responsive Design (Принципи на адаптивния дизайн)

### 1. Fluid Grid (Гъвкава мрежа)

* Вместо фиксирани пиксели (px), използва относителни единици (%, em, rem, vw, vh).
* Това позволява на съдържанието да се разтяга или свива в зависимост от размера на екрана.

**Премер:**
```css
.container {
    width: 80%; /* Ширината се адаптира според екрана */
}
```

### 2. Flexible Images (Адаптивни изображения)

* Изображенията автоматично се преоразмеряват, за да не излизат извън екрана.

**Премер:**
```css
img {
    max-width: 100%; /* Изображението няма да е по-голямо от родителския контейнер */
    height: auto; /* Запазва пропорциите */
}
```

### 3. Media Queries

* Позволяват CSS правилата да се прилагат в зависимост от ширината на екрана.
* Например, различни стилове за мобилни, таблети и десктопи.

```css
@media (max-width: 768px) {
    .container {
        width: 100%;
    }
}
```

Това правило прави `.container` 100% ширина, когато екранът е по-малък от 768px.


### 4. Mobile-first Design (Дизайн, ориентиран към мобилни устройства)

* Сайтовете първо се изграждат за мобилни устройства, а след това се разширяват за по-големи екрани.
* Това подобрява производителността на мобилни устройства и дава по-добро потребителско изживяване.


## 3. The Viewport Meta Tag

`<meta name="viewport" content="width=device-width, initial-scale=1.0">`

**Viewport Meta Tag** е задължителен за адаптивен дизайн, тъй като контролира как браузърът изобразява страницата на различни устройства.


**Значение на атрибутите:**
* `width=device-width` – Задава ширината на viewport-а равна на ширината на устройството.
* `initial-scale=1.0` – Определя мащабирането на страницата при зареждане (1.0 = 100%).

**Пример за използване:**
```css
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
```

**Ако viewport meta tag липсва?**`

* Страницата ще се показва с фиксирана ширина, което може да доведе до некоректно мащабиране и неудобна навигация на мобилни устройства.


## 4. Media Queries

Media Queries са мощен инструмент в CSS, който позволява прилагането на различни стилове в зависимост от размера на екрана, резолюцията, ориентацията и други характеристики на устройството.

С други думи, те се използват, за да направим уебсайта адаптивен (responsive), като променяме оформлението му спрямо устройството, на което се разглежда.


**Как работят Media Queries?**

Медийните заявки използват правило @media, което проверява определени условия (като ширина на екрана) и прилага CSS стилове само ако условията са изпълнени.

Пример за основна media query:
```css
@media (max-width: 768px) {
    body {
        background-color: lightblue; /* Променя цвета на фона при екрани по-малки от 768px */
    }
}
```

**Какво прави горния код?**

* Ако ширината на екрана е 768px или по-малко, фонът на страницата става светлосин.
* Ако екранът е по-голям от 768px, стилът няма да се приложи.


**Основни свойства в Media Queries**

Медийните заявки могат да проверяват следните характеристики:

| Method        | Description                          |
| ------------- | ------------------------------------ |
| `width`       | Ширина на viewport-а (например `max-width: 768px`)  |
| `height`      | Височина на viewport-а (по-рядко използвано) |
| `min-width`   | Минимална ширина на екрана (пример: `min-width: 1024px`) |
| `max-width`   | Максимална ширина на екрана (пример: `max-width: 480px`) |
| `orientation` | Дали екранът е портретен (`portrait`) или пейзажен (`landscape`) |
| `resolution`  | Разделителна способност на екрана, напр. `min-resolution: 300dpi` (за ретина дисплеи) |


### **Mobile-first vs. Desktop-first подход**

Има два начина за използване на media queries:

#### **1. Mobile-first (Препоръчителен)**

* Дизайнът първо се създава за мобилни устройства, след което се разширява за по-големи екрани.
* Използва min-width за адаптиране към по-големи устройства.

**Пример за mobile-first подход:**
```css
body {
    font-size: 16px; /* Малък екран (по подразбиране) */
}

@media (min-width: 768px) {
    body {
        font-size: 18px; /* Увеличава размера на текста за таблети */
    }
}

@media (min-width: 1024px) {
    body {
        font-size: 20px; /* Още по-голям текст за лаптопи и десктопи */
    }
}
```

* **Тук малките екрани са базовият стил, а за по-големи устройства се добавят подобрения.**


#### **2. Desktop-first (По-рядко използван)**

* Дизайнът първо се прави за настолни компютри, след което се смалява за мобилни устройства.
* Използва max-width за адаптиране към по-малки екрани.

**Пример за desktop-first подход:**
```css
body {
    font-size: 20px; /* Голям екран (по подразбиране) */
}

@media (max-width: 1024px) {
    body {
        font-size: 18px; /* Намалява размера на текста за таблети */
    }
}

@media (max-width: 768px) {
    body {
        font-size: 16px; /* Още по-малък текст за телефони */
    }
}
```

* **Тук дизайнът се прави първо за големи екрани, а след това се настройва за по-малки.**


### **Комбиниране на условия в Media Queries**

Може да комбинираме няколко условия с `and`, `or` (`,`) и `not`.

#### **1. Комбиниране с `and`**

Изисква и двете условия да са изпълнени.

**Пример:**
```css
@media (min-width: 600px) and (max-width: 1024px) {
    body {
        background-color: lightgray; /* Ще се приложи само между 600px и 1024px */
    }
}
```

#### **2. Комбиниране с `or` (`,`)**

Позволява едно от двете условия да бъде изпълнено.

**Пример:**
```css
@media (max-width: 600px), (orientation: portrait) {
    body {
        background-color: pink; /* Ако екранът е малък ИЛИ в портретен режим */
    }
}
```

#### **3. Използване на `not`**

Прилага стилове, ако условието НЕ е изпълнено.

**Пример:**
```css
@media not all and (min-width: 800px) {
    body {
        background-color: yellow; /* Ще се приложи, ако екранът е под 800px */
    }
}
```

### **Пример: Responsive дизайн с Media Queries**

**Цел:** Да направим триколонно оформление, което става едноколонно на малки екрани.

```css
.container {
    display: flex;
    flex-wrap: wrap;
}

.box {
    width: 30%;
    padding: 20px;
    background-color: lightblue;
    margin: 10px;
    text-align: center;
}

@media (max-width: 768px) {
    .box {
        width: 100%; /* На малки екрани кутиите стават една под друга */
    }
}
```

**Как работи?**

* По default, .box е 30% ширина (3 кутии в ред).
* Ако екранът е по-малък от 768px, .box става 100% ширина (едноколонно оформление).
